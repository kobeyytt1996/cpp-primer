#include <memory>
#include <vector>
#include <string>
#include <initializer_list>
#include <stdexcept>
using namespace std;

template <typename T> class BlobPtr;
template <typename T> class Blob
{

	friend class BlobPtr<T>;
public:
	typedef typename vector<T>::size_type size_type;
	Blob();
	size_type size() const { return data->size(); }
	void push_back(T &&t) { data->push_back(std::move(t)); }
	const T& operator[](size_t n) const { return (*data)[n]; }
	T& back() { return data->back(); }
private:
	shared_ptr<vector<T>> data;
	void check(size_t, const string&) const;
};

template <typename T>
void Blob<T>::check(size_t n, const string &msg) const
{
	if (i >= size())
		throw out_of_range(msg);
}

template <typename T>
Blob<T>::Blob() : data(make_shared<vector<T>>()) {}

