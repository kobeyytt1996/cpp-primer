#pragma once
#include <string>
#include <iostream>
#include <memory>
#include <vector>
#include <set>
using namespace std;

class Quote {
public:
	Quote() = default;
	Quote(const string &book, double sales_price) :
		BookNo(book), price(sales_price) {}
	Quote(const Quote &qu) : 
		BookNo(qu.BookNo), price(qu.price){}
	Quote& operator=(const Quote &qu)
	{
		BookNo = qu.BookNo;
		price = qu.price;
	}
	string isbn() const { return BookNo; }
	virtual double net_price(size_t n) const
	{ return n * price; }
	virtual void debug() const
	{
		cout << "Book.no: " << BookNo
			<< " price: " << price << endl;
	}
	virtual Quote* clone() const &
	{ return new Quote(*this); }
	virtual Quote* clone() &&
	{ return new Quote(std::move(*this)); }
	virtual ~Quote() = default;
private:
	string BookNo;
protected:
	double price = 0.0;
};

class Disc_quote : public Quote {
public:
	Disc_quote() = default;
	Disc_quote(const string &book, double sales_price, size_t n, double disc) :
		Quote(book, sales_price), quantity(n), discount(disc){}
	virtual double net_price(size_t) const = 0;
protected:
	size_t quantity = 0;
	double discount = 0.0;
};

class Bulk_quote : public Disc_quote {
public:
	Bulk_quote() = default;
	Bulk_quote(const string &book, double sales_price, size_t n, double disc) : 
		Disc_quote(book, sales_price, n, disc) {}
	double net_price(size_t n) const override
	{
		if (n >= quantity)
			return n * (1 - discount) * price;
		else
			return n * price;
	}
	Bulk_quote* clone() const & override
	{ return new Bulk_quote(*this); }
	Bulk_quote* clone() && override
	{ return new Bulk_quote(std::move(*this)); }
};

class Limit_quote : public Quote {
public:
	Limit_quote() = default;
	Limit_quote(const string &book, double sales_price, size_t qty, double disc) :
		Quote(book, sales_price), max_qty(qty), discount(disc) {}
	double net_price(size_t n) const override
	{
		if (n <= max_qty)
			return n * (1 - discount) * price;
		else
			return n * price;
	}
private:
	size_t max_qty = 0;
	double discount = 0.0;
};

double print_total(ostream &os, const Quote &item, size_t n)
{
	double ret = item.net_price(n);
	cout << "ISBN: " << item.isbn()
		<< " #sold: " << n << " total due: " << ret << endl;
	return ret;
}

class Basket {
public:
	void add_items(const Quote &sale)
	{ items.insert(shared_ptr<Quote>(sale.clone()));}
	void add_items(Quote &&sale)
	{ items.insert(shared_ptr<Quote>(std::move(sale).clone()));}
	double total_receipt(ostream &) const;
private:
	static bool compare(const shared_ptr<Quote> &lhs, const shared_ptr<Quote> &rhs) 
	{ return lhs->isbn() < rhs->isbn(); }
	multiset<shared_ptr<Quote>, decltype(compare) *> items{ compare };
};

double Basket::total_receipt(ostream &os) const
{
	double sum = 0.0;
	for (auto iter = items.cbegin();
		iter != items.cend();
		iter = items.upper_bound(*iter))
		sum += print_total(os, **iter, items.count(*iter));
	os << "Total: " << sum << endl;
	return sum;
}

