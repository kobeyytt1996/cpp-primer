#pragma once
#ifndef STRBLOB_H
#define STRBLOB_H
#include <vector>
#include <string>
#include <memory>
#include <initializer_list>
#include <stdexcept>
using namespace std;

class StrBlob {
public:
	typedef vector<string>::size_type size_type;
	StrBlob();
	StrBlob(initializer_list<string> il);
	size_type size() const { return data->size(); }
	bool empty() const { return data->empty(); }

	string& front();
	const string& front() const;
	string& back();
	const string& back() const;

	void push_back(const string &t) { data->push_back(t); };
	string& pop_back();
private:
	shared_ptr<vector<string>> data;
	void check(size_type i, const string &msg) const;
};

StrBlob::StrBlob() : data(make_shared<vector<string>>()) {}
StrBlob::StrBlob(initializer_list<string> il) : data(make_shared<vector<string>>(il)) {}

void StrBlob::check(size_type i, const string &msg) const
{
	if (i >= data->size())
		throw out_of_range(msg);
}
string& StrBlob::front()
{
	check(0, "front on empty");
	return data->front();
}
const string& StrBlob::front() const
{
	check(0, "front on empty");
	return data->front();
}
string& StrBlob::back()
{
	check(0, "back on empty");
	return data->back();
}
const string& StrBlob::back() const
{
	check(0, "back on empty");
	return data->back();
}
string& StrBlob::pop_back()
{
	check(0, "pop on empty");
	data->pop_back();
}

#endif


